// <auto-generated />
using coIT.MyHeco.Login.Data.MyHeco;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace coIT.MyHeco.Login.Data.Migrations
{
    [DbContext(typeof(MyHecoDbContext))]
    [Migration("20180313132955_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("coIT.MyHeco.Login.Domain.MyHecoBenutzer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("WrongLogins");

                    b.HasKey("Id");

                    b.ToTable("Benutzer");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MyHecoBenutzer");
                });

            modelBuilder.Entity("coIT.MyHeco.Login.Domain.EingeloggterBenutzer", b =>
                {
                    b.HasBaseType("coIT.MyHeco.Login.Domain.MyHecoBenutzer");


                    b.ToTable("EingeloggterBenutzer");

                    b.HasDiscriminator().HasValue("EingeloggterBenutzer");
                });

            modelBuilder.Entity("coIT.MyHeco.Login.Domain.GesperrterBenutzer", b =>
                {
                    b.HasBaseType("coIT.MyHeco.Login.Domain.MyHecoBenutzer");


                    b.ToTable("GesperrterBenutzer");

                    b.HasDiscriminator().HasValue("GesperrterBenutzer");
                });

            modelBuilder.Entity("coIT.MyHeco.Login.Domain.MyHecoBenutzer", b =>
                {
                    b.OwnsOne("coIT.MyHeco.Login.Domain.BenutzerInformationen.Firma", "Firma", b1 =>
                        {
                            b1.Property<Guid>("MyHecoBenutzerId");

                            b1.Property<string>("Name");

                            b1.ToTable("Benutzer");

                            b1.HasOne("coIT.MyHeco.Login.Domain.MyHecoBenutzer")
                                .WithOne("Firma")
                                .HasForeignKey("coIT.MyHeco.Login.Domain.BenutzerInformationen.Firma", "MyHecoBenutzerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("coIT.MyHeco.Login.Domain.BenutzerInformationen.LoginInformation", "LoginInformation", b1 =>
                        {
                            b1.Property<Guid>("MyHecoBenutzerId");

                            b1.Property<string>("Email");

                            b1.Property<string>("Passwort");

                            b1.ToTable("Benutzer");

                            b1.HasOne("coIT.MyHeco.Login.Domain.MyHecoBenutzer")
                                .WithOne("LoginInformation")
                                .HasForeignKey("coIT.MyHeco.Login.Domain.BenutzerInformationen.LoginInformation", "MyHecoBenutzerId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
